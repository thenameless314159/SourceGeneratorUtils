namespace SourceGeneratorUtils.Tests;

public class SourceFileEmitterBaseTests
{
    private static readonly TestSourceGenerationSpec DefaultSpec = new() { Namespace = "SourceGeneratorUtils.Tests" };
    private readonly TestSourceFileEmitter _emitter = new(SourceFileEmitterBaseOptions.Default);

    [Fact] public void GetTargetOuterUsingDirectives_ReturnsEmptyEnumerable()
        => Empty(new EmptySourceFileEmitter().GetTargetOuterUsingDirectives(DefaultSpec));

    [Fact] public void GetTargetInnerUsingDirectives_ReturnsEmptyEnumerable()
        => Empty(new EmptySourceFileEmitter().GetTargetInnerUsingDirectives(DefaultSpec));

    [Fact]
    public void GenerateSource_ShouldEmitSourceFileWithNameAndContent()
    {
        var sourceFile = _emitter.GenerateSource(DefaultSpec);
        True(_emitter.EmitTargetSourceCodeCalled);
        True(_emitter.GetFileNameCalled);

        Equal(string.Empty, sourceFile.Name);
        NotEmpty(sourceFile.Content.ToString());
    }

    [Theory]
    [InlineData(null)]
    [InlineData("""
        <auto-generated>
            This code was generated by SourceGeneratorUtils.Tests.
        <auto-generated />
        """)]
    public void CreateSourceWriter_ShouldIncludeSourcePrefix(string? prefixToUse)
    {
        var emitter = prefixToUse is not null 
            ?  new TestSourceFileEmitter(_emitter.Options with { SourceFileHeader = prefixToUse })
            : _emitter;

        var writer = emitter.CreateSourceWriter(DefaultSpec);

        string expected = prefixToUse ?? WellKnownStrings.ShortSourcePrefix;
        StartsWith(expected, writer.ToString());
    }

    [Theory]
    [InlineData(true, false)]
    [InlineData(false, true)]
    public void CreateSourceWriter_ShouldIncludeNullableAnnotations(bool enableNullableAnnotations, bool enableNullableWarnings)
    {
        var emitter = new TestSourceFileEmitter(_emitter.Options with
        {
            EnableNullableAnnotations = enableNullableAnnotations,
            EnableNullableWarnings = enableNullableWarnings
        });

        var writer = emitter.CreateSourceWriter(DefaultSpec);
        
        string expected = $"""
            // <auto-generated/>

            #nullable {(enableNullableAnnotations ? "enable" : "disable")} annotations
            #nullable {(enableNullableWarnings ? "enable" : "disable")} warnings
            """;

        StartsWith(expected, writer.ToString());
    }

    [Theory, InlineData(true), InlineData(false)]
    public void CreateSourceWriter_ShouldSuppressWarnings(bool suppressWarnings)
    {
        var emitter = suppressWarnings
            ? new TestSourceFileEmitter(_emitter.Options 
                with { SuppressWarnings = new []{ "CS0618, CS0619", "IDE0005" } })
            : _emitter;

        var writer = emitter.CreateSourceWriter(DefaultSpec);

        const string expected = "#pragma warning disable CS0618, CS0619, IDE0005";
        if (suppressWarnings) Contains(expected, writer.ToString());
        else DoesNotContain(expected, writer.ToString());
    }

    [Theory, InlineData(true), InlineData(false)]
    public void CreateSourceWriter_ShouldIncludeOuterUsingDirectives(bool include)
    {
        var emitter = include
            ? new TestSourceFileEmitter(_emitter.Options
                with { DefaultOuterUsingDirectives = new[] { "MyNamespace1", "SecondNamespace.WithSubNamespace" } })
            : _emitter;

        var writer = emitter.CreateSourceWriter(include 
            ? DefaultSpec with { OuterUsingDirectives = new[] { "System", "MyNamespace1", "static SourceGeneratorUtils.WellKnownChars" } }
            : DefaultSpec);

        const string expected = """
            using static SourceGeneratorUtils.WellKnownChars;
            using SecondNamespace.WithSubNamespace;
            using MyNamespace1;
            using System;
            """;

        if (include) Contains(expected, writer.ToString());
        else DoesNotContain(expected, writer.ToString());
    }

    [Theory]
    [InlineData(null, true)]
    [InlineData(null, false)]
    [InlineData("SourceGeneratorUtils.Tests", true)]
    [InlineData("SourceGeneratorUtils.Tests", false)]
    public void CreateSourceWriter_ShouldIncludeNamespaceDeclaration(string? @namespace, bool useFileScopeNamespace)
    {
        var emitter = new TestSourceFileEmitter(_emitter.Options with { UseFileScopedNamespace = useFileScopeNamespace });
        var writer = emitter.CreateSourceWriter(DefaultSpec with { Namespace = @namespace });

        string expected = useFileScopeNamespace
            ? $"namespace {@namespace};"
            : $"namespace {@namespace}{Environment.NewLine}{{";

        if (@namespace is not null) Contains(expected, writer.ToString());
        else DoesNotContain(expected, writer.ToString());
    }

    [Theory, InlineData(true), InlineData(false)]
    public void CreateSourceWriter_ShouldIncludeInnerUsingDirectives(bool include)
    {
        var emitter = include
            ? new TestSourceFileEmitter(_emitter.Options
                with { DefaultInnerUsingDirectives = new[] { "Infrastructure", "InnerNamespace.WithSubNamespace" } })
            : _emitter;

        var writer = emitter.CreateSourceWriter(include
            ? DefaultSpec with { InnerUsingDirectives = new[] { "Infrastructure", "Models", "static SourceGeneratorUtils.WellKnownChars" } }
            : DefaultSpec);

        const string expected = """
            namespace SourceGeneratorUtils.Tests
            {
                using static SourceGeneratorUtils.WellKnownChars;
                using InnerNamespace.WithSubNamespace;
                using Infrastructure;
                using Models;
            """;

        if (include) Contains(expected, writer.ToString());
        else DoesNotContain(expected, writer.ToString());
    }

    private sealed record TestSourceGenerationSpec : AbstractGenerationSpec
    {
        public string Comment { get; init; } = "Hello There !";
        public IReadOnlyList<string> OuterUsingDirectives { get; init; } = Array.Empty<string>();
        public IReadOnlyList<string> InnerUsingDirectives { get; init; } = Array.Empty<string>();
    }

    private sealed class EmptySourceFileEmitter : SourceFileEmitterBase<TestSourceGenerationSpec>
    {
        public EmptySourceFileEmitter() : base(SourceFileEmitterBaseOptions.Default)
        {
        }

        public override string GetFileName(TestSourceGenerationSpec target) => string.Empty;

        public override void EmitTargetSourceCode(TestSourceGenerationSpec target, SourceWriter writer)
        {
        }
    }

    private sealed class TestSourceFileEmitter : SourceFileEmitterBase<TestSourceGenerationSpec>
    {
        public bool EmitTargetSourceCodeCalled { get; private set; }
        public bool GetFileNameCalled { get; private set; }

        public TestSourceFileEmitter(SourceFileEmitterBaseOptions options) : base(options)
        {
        }

        public override string GetFileName(TestSourceGenerationSpec target)
        {
            GetFileNameCalled = true;
            return string.Empty;
        }

        public override void EmitTargetSourceCode(TestSourceGenerationSpec target, SourceWriter writer)
        {
            EmitTargetSourceCodeCalled = true;
            writer.WriteLine("// " + target.Comment);
        }

        public override IReadOnlyList<string> GetTargetOuterUsingDirectives(TestSourceGenerationSpec target)
            => target.OuterUsingDirectives;

        public override IReadOnlyList<string> GetTargetInnerUsingDirectives(TestSourceGenerationSpec target)
            => target.InnerUsingDirectives;
    }
}